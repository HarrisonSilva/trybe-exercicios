üíª Primeiro passo: Crie a estrutura do forEach.

Para isso, voc√™ precisa acessar o array de pessoasAprovadas.forEach.

const pessoasAprovadas = ['Ana Beatriz', 'Caio Nunes', 'Afonso Ribeiro', 'Leonardo Lins']; // lista de nomes

pessoasAprovadas.forEach(() => {});

üíª Segundo passo: Passe os par√¢metros nome e index na callback.

const pessoasAprovadas = ['Ana Beatriz', 'Caio Nunes', 'Afonso Ribeiro', 'Leonardo Lins']; // lista de nomes

pessoasAprovadas.forEach((nome, index) => {});

üíª Terceiro passo: Crie a l√≥gica dentro do forEach utilizando a fun√ß√£o toUpperCase().

Voc√™ pode acessar cada item do array pessoasAprovadas e transformar cada nome em mai√∫sculo.

const pessoasAprovadas = ['Ana Beatriz', 'Caio Nunes', 'Afonso Ribeiro', 'Leonardo Lins']; // lista de nomes

pessoasAprovadas.forEach((nome, index) => {
  pessoasAprovadas[index] = pessoasAprovadas[index].toUpperCase(); // acessa cada elemento do array e atualiza para letra mai√∫scula
});

console.log(pessoasAprovadas); // ['ANA BEATRIZ', 'CAIO NUNES', 'AFONSO RIBEIRO', 'LEONARDO LINS']

Observa√ß√£o üîé: perceba que o tipo de dado do array pessoasAprovadas continua sendo um array. Por isso, podemos utilizar a const, j√° que n√£o estamos reatribuindo valores. Seria o mesmo que acessar cada item do array e transform√°-lo em letra mai√∫scula. Por exemplo, pessoasAprovadas[0].toUpperCase();.

Agora imagine que voc√™ tenha desenvolvido um programa para fazer a tabuada do 2. Como voc√™ acha que esse c√≥digo seria ao utilizar o forEach?

Voc√™ pode construir a sua l√≥gica da seguinte maneira:

const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

numbers.forEach((element) => {
  console.log(element * 2); // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]
});

No exemplo acima, para cada item do array number, o forEach executa um console.log com a multiplica√ß√£o do elemento atual do array por 2.

Voc√™ tamb√©m pode deixar esse c√≥digo em apenas uma linha. Para isso, basta remover as chaves {} e deixar o console logo ap√≥s a arrow. Observe o exemplo abaixo:

const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

numbers.forEach((element) => console.log(element * 2));

Voc√™ tamb√©m pode separar a callback do forEach em uma outra fun√ß√£o. Veja o exemplo abaixo:

const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

const multiply = (element) => {
  console.log(element * 2);
}

numbers.forEach(multiply);

Imagine que voc√™ esteja respons√°vel por exibir a lista de emails de todas as pessoas que trabalham na mesma empresa que voc√™. Para isso, voc√™ pode utilizar o forEach para apresentar os emails.

Use o m√©todo forEach para exibir a lista de emails com a seguinte frase: O email ${email} est√° cadastrado em nosso banco de dados!.
Copiar


const emailListInData = [
  'roberta@email.com',
  'paulo@email.com',
  'anaroberta@email.com',
  'fabiano@email.com',
];

// Adicione seu c√≥digo aqui

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/1a8e874c-0ece-4302-88fb-455c93880bb7/lesson/7c95e3e2-00bd-4ea4-87d8-334047d6925e/solution4

------------------------------------------------------------------------------------------------

A fun√ß√£o find √© utilizada para achar o primeiro elemento que satisfa√ßa a condi√ß√£o passada e retorne o primeiro valor do array que corresponda a essa condi√ß√£o. Caso ele n√£o encontre, retorna undefined.

Por exemplo, imagine que o time de pessoas desenvolvedoras com quem voc√™ trabalha resolveu fazer um desafio. Para isso, salvaram todas as idades das pessoas em um array, e voc√™ precisa descobrir se existem pessoas com menos de 20 e com mais de 50 anos. Como voc√™ faria? ü§î

O find poderia te ajudar nessa tarefa! Observe e execute o exemplo abaixo:

const idades = [18, 21, 42, 20, 19, 21, 30, 73, 82, 45, 48, 50];

idades.find((idade) => idade < 20); // 18


No exemplo acima, o retorno foi 18. Isso acontece porque a primeira itera√ß√£o do find acessa o primeiro item do array, que √© o 18. Ao verificar se 18 √© menor que 20, a resposta √© true, e ent√£o o find retorna o n√∫mero 18 e encerra a execu√ß√£o do c√≥digo.

Bom, voc√™ j√° descobriu que existem pessoas que trabalham com voc√™ e possuem menos de 20 anos. Agora voc√™ precisa verificar se existem pessoas com mais de 50 anos. Como voc√™ pode fazer? ü§î

Basta seguir a mesma estrutura do exemplo anterior e substituir o n√∫mero 20 por 50. Observe e execute o c√≥digo abaixo:


const idades = [18, 21, 42, 20, 19, 21, 30, 73, 82, 45, 48, 50];

idades.find((idade) => idade > 50); // 73

O retorno do c√≥digo acima foi 73, o que significa que existem pessoas com mais de 50 anos que trabalham no mesmo time que voc√™. ü§©

Caso voc√™ realize uma verifica√ß√£o com o find que n√£o encontre nenhum elemento, o retorno ser√° undefined. Observe e execute o exemplo abaixo para verificar se existem pessoas com idade igual a 33 anos:

O retorno do c√≥digo acima foi 73, o que significa que existem pessoas com mais de 50 anos que trabalham no mesmo time que voc√™. ü§©

Caso voc√™ realize uma verifica√ß√£o com o find que n√£o encontre nenhum elemento, o retorno ser√° undefined. Observe e execute o exemplo abaixo para verificar se existem pessoas com idade igual a 33 anos:

Para refor√ßar seu aprendizado sobre o find, observe o gif abaixo, que executa a HOF find para verificar se existe algum n√∫mero maior que 20:

Vamos verificar passo a passo como a l√≥gica do gif acima acontece:

Existe um array chamado listaNumeros com os valores 10, 20, 30, 40;

Ao executar o find, a fun√ß√£o callback √© chamada para cada elemento do array listaNumeros;

Se o valor for maior que 20, retorna o valor e para a execu√ß√£o.

O valor retornado √© 30, pois √© o primeiro valor encontrado que √© maior que 20.

Saiba mais üí°: Nesta p√°gina do MDN voc√™ pode encontrar mais detalhes sobre o find.

Agora que voc√™ j√° viu como o find funciona, que tal praticar? üíª


Para fixar
Utilize o find para retornar o primeiro n√∫mero do array que √© divis√≠vel por 3 e 5, caso ele exista:

const numbers = [19, 21, 30, 3, 45, 22, 15];

// Adicione seu c√≥digo aqui

Utilize o find para encontrar o primeiro nome com cinco letras, caso ele exista:

const names = ['Jo√£o', 'Irene', 'Fernando', 'Maria'];

// Adicione seu c√≥digo aqui

Utilize o find para encontrar a m√∫sica com id igual a '31031685', caso ela exista:

const musicas = [
  { id: '31031685', title: 'Partita in C moll BWV 997' },
  { id: '31031686', title: 'Toccata and Fugue, BWV 565' },
  { id: '31031687', title: 'Chaconne, Partita No. 2 BWV 1004' },
];

// Adicione seu c√≥digo aqui

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/1a8e874c-0ece-4302-88fb-455c93880bb7/lesson/24b288cd-786b-452a-bf5d-498264b078fd/solution

---------------------------------------------------------------------------

As fun√ß√µes some e every s√£o parecidas e retornam valores booleanos.

A fun√ß√£o some retorna true se ao menos um elemento de um array satisfaz a uma condi√ß√£o. J√° o every retorna true se todos os elementos de um array satisfazem a uma condi√ß√£o.

Array.some
Imagine que voc√™ esteja respons√°vel por criar um sistema de acesso para as pessoas colaboradas da empresa em que voc√™ trabalha. Para isso, precisa verificar se pelo menos uma dessas pessoas possui o cargo de ger√™ncia. Como voc√™ faria? ü§î

As informa√ß√µes das pessoas est√£o dentro de um array de objetos conforme o exemplo abaixo:

const pessoas = [
  { nome: 'Ana', cargo: 'Analista' },
  { nome: 'Jo√£o', cargo: 'Ger√™ncia' },
  { nome: 'Aline', cargo: 'Analista' },
  { nome: 'Joana', cargo: 'Ger√™ncia' },
];

Como voc√™ precisa descobrir se alguma das pessoas possui o cargo de ger√™ncia e n√£o precisa de mais detalhes sobre essa pessoa, voc√™ pode utilizar o some, que vai retornar true caso encontre algu√©m com esse cargo, sen√£o vai retornar false. Observe e execute o exemplo abaixo:

Como voc√™ precisa descobrir se alguma das pessoas possui o cargo de ger√™ncia e n√£o precisa de mais detalhes sobre essa pessoa, voc√™ pode utilizar o some, que vai retornar true caso encontre algu√©m com esse cargo, sen√£o vai retornar false. Observe e execute o exemplo abaixo:

No c√≥digo acima, √© verificado se dentro do array de pessoas existe algu√©m que possua o cargo de 'Ger√™ncia'. O retorno foi true porque existe pelo menos uma pessoa com esse cargo.

Agora, utilizando a mesma l√≥gica, verifique se existe uma pessoa com o cargo de 'Product Owner'. Analise e execute o c√≥digo abaixo:

const pessoas = [
  { nome: 'Ana', cargo: 'Analista' },
  { nome: 'Jo√£o', cargo: 'Ger√™ncia' },
  { nome: 'Aline', cargo: 'Analista' },
  { nome: 'Joana', cargo: 'Ger√™ncia' },
];

const verificaCargo = pessoas.some((pessoa) => pessoa.cargo === 'Product Owner');

console.log(verificaCargo); // false

No c√≥digo acima, o retorno foi false, pois n√£o existe ningu√©m nesse array com o cargo de 'Product Owner'.

Portanto, tenha em mente que o some s√≥ retorna true caso encontre algum elemento que satisfa√ßa √† condi√ß√£o. Caso contr√°rio, retorna false.

Agora imagine que voc√™ precise verificar se existe algum nome que comece com a letra desejada. Analise e execute o c√≥digo abaixo:


const listNames = ['Maria', 'Manuela', 'Jorge', 'Ricardo', 'Wilson'];

const verifyFirstLetter = (letter, names) => names.some((name) => name[0] === letter);

console.log(verifyFirstLetter('J', listNames)); // true
console.log(verifyFirstLetter('X', listNames)); // false

O c√≥digo acima mostra a fun√ß√£o verifyFirstLetter, que recebe como primeiro par√¢metro letter, que √© a letra desejada, e como segundo par√¢metro o array chamado listNames.

Dentro da fun√ß√£o verifyFirstLetter, √© executado o some para verificar se a primeira letra do nome atual (name[0]) da itera√ß√£o √© igual √† letra desejada (letter).

Ao verificar se existe um nome que come√ßa com a letra J, o retorno √© true. Isso significa que existe um nome que come√ßa com a letra J. J√° ao verificar se existe um nome que inicia com X, o retorno √© false, pois n√£o existe nenhum nome que inicie com X.

Array.every
Imagine que voc√™ pegou um boletim escolar antigo e quer verificar se passou em todas as mat√©rias. Como voc√™ faria? ü§î

Ao utilizar a fun√ß√£o every, voc√™ consegue resolver esse problema. Caso tenha passado em todas as mat√©rias, o retorno ser√° true; caso contr√°rio, ser√° false. Analise e execute o c√≥digo abaixo:

const grades = {
  portugues: 'Aprovado',
  matematica: 'Reprovado',
  ingles: 'Aprovado',
};

const verifyGrades = Object.values(grades).every((grade) => grade === 'Aprovado'); // false

console.log(verifyGrades);

Vamos analisar a fun√ß√£o acima?

A vari√°vel verifyGrades √© respons√°vel por salvar a l√≥gica;

Ao utilizar o Object.values, o retorno ser√° um array com os valores das chaves do objeto grades como ['Aprovado', 'Reprovado', 'Aprovado'];

Ent√£o o every executa a callback para cada um dos itens do array e verifica se todos eles possuem o texto 'Aprovado';

O retorno √© false, pois nem todos os valores das chaves do objeto grades s√£o iguais a 'Aprovado'.

De olho na dica üëÄ: para manter seu c√≥digo conciso e evitar que erros aconte√ßam, voc√™ pode utilizar o m√©todo toLowerCase() para deixar todos os itens do array com letras min√∫sculas. Por exemplo: grade.toLowerCase() === 'aprovado'

Saiba mais üí°: Para saber mais sobre essas fun√ß√µes, o MDN cont√©m explica√ß√µes e exemplos. Clique aqui e aqui para ler sobre essas fun√ß√µes.

Para fixar
Voc√™ ficou respons√°vel por conferir a lista de pessoas convidadas de uma festa de casamento e precisa verificar se o nome da pessoa est√° ou n√£o na lista. Para isso, voc√™ deve utilizar o c√≥digo abaixo e desenvolver sua l√≥gica a partir dele:

O nome das pessoas convidadas est√° salvo em um array chamado names;

A fun√ß√£o hasName √© respons√°vel por verificar se o nome da pessoa est√° ou n√£o na lista. Essa fun√ß√£o recebe dois par√¢metros: arr, que √© o array com o nome das pessoas convidadas, e name, que √© o nome a ser verificado na lista de convidados (array names).

Caso a pessoa esteja na lista de convidados, o retorno da fun√ß√£o hasName deve ser true. Caso contr√°rio, deve ser false.

Dica: use some.

const names = ['Mateus', 'Jos√©', 'Ana', 'Cl√°udia', 'Bruna'];

const hasName = (arr, name) => {
  //Adicione seu c√≥digo aqui
};

console.log(hasName(names, 'Ana'));
console.log(hasName(names, 'Pedro'));

Voc√™ ficou respons√°vel por criar um sistema que verifica se as pessoas da mesma turma possuem uma determinada faixa de idade. Voc√™ deve utilizar o array people e desenvolver a sua l√≥gica a partir dele. Para isso:

Crie uma fun√ß√£o que verifica se todas as pessoas do array people possuem a idade m√≠nima especificada;

Retorne true se todas tiverem a idade maior ou igual √† m√≠nima e, caso contr√°rio, false.

const people = [
  { name: 'Mateus', age: 18 },
  { name: 'Jos√©', age: 16 },
  { name: 'Ana', age: 23 },
  { name: 'Cl√°udia', age: 20 },
  { name: 'Bruna', age: 19 },
];

  //Adicione seu c√≥digo aqui

console.log(verifyAges(people, 18));
console.log(verifyAges(people, 14));

Caso queira testar ainda mais a execu√ß√£o das fun√ß√µes some e every, acesse os links abaixo:

https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/1a8e874c-0ece-4302-88fb-455c93880bb7/lesson/f179b214-eaac-47ec-ba22-a574478f4c0d/solution

Exerc√≠cios - agora, a pr√°tica
Parte I
Nova pessoa contratada
Voc√™ ficou respons√°vel por organizar o sistema de contrata√ß√£o de uma empresa e deve criar uma estrutura de dados que possua o formato { nomeCompleto, email } para representar a nova pessoa contratada. Al√©m disso, voc√™ deve gerar os emails de cada pessoa que √© contratada na empresa. Para isso:

crie uma fun√ß√£o que receba como par√¢metro o nome completo da nova pessoa colaboradora e que automaticamente gere um email no formato nome_da_pessoa@trybe.com;

utilize a fun√ß√£o newEmployees, definida abaixo, para receber a sua fun√ß√£o como par√¢metro e criar o objeto de cada pessoa contratada.

const newEmployees = () => {
  const employees = {
    id1: '', // Nome: Pedro Guerra -> Chame sua fun√ß√£o passando o nome Pedro Guerra como par√¢metro, substituindo as aspas
    id2: '', // Nome: Luiza Drumond -> Chame sua fun√ß√£o passando o nome Luiza Drumond como par√¢metro, substituindo as aspas
    id3: '', // Nome: Carla Paiva -> Chame sua fun√ß√£o passando o nome Carla Paiva como par√¢metro, substituindo as aspas
  }
  return employees;
};

Sorteador de loteria
Desenvolva uma HOF que retorne o resultado de um sorteio. Essa HOF ir√° gerar um n√∫mero aleat√≥rio entre 1 e 5, recebendo como par√¢metros o n√∫mero apostado e uma fun√ß√£o que checa se o n√∫mero apostado √© igual ao n√∫mero sorteado. O retorno da sua HOF deve ser uma string (Ex: ‚ÄúTente novamente‚Äù ou ‚ÄúParab√©ns, voc√™ ganhou‚Äù).

Corretor autom√°tico de exame
Crie uma HOF que receber√° tr√™s par√¢metros:

O primeiro ser√° um array de respostas corretas (solu√ß√µes);

O segundo ser√° um array contendo as respostas fornecidas por uma pessoa estudante;

O terceiro √© uma fun√ß√£o que compara os dois arrays e ent√£o d√° uma pontua√ß√£o baseada nos acertos. Para isso, essa fun√ß√£o usar√° os seguintes crit√©rios:

Uma resposta correta adiciona 1 ponto √† pontua√ß√£o final;

A aus√™ncia de uma resposta n√£o altera a pontua√ß√£o (quando for ‚ÄúN.A‚Äù);

Uma resposta incorreta reduz a pontua√ß√£o final em 0.5 ponto.

Ao final, a HOF deve retornar o total de pontos obtidos atrav√©s das respostas fornecidas pela pessoa estudante. Utilize os seguintes arrays:

const RIGHT_ANSWERS = ['A', 'C', 'B', 'D', 'A', 'A', 'D', 'A', 'D', 'C'];
const STUDENT_ANSWERS = ['A', 'N.A', 'B', 'D', 'A', 'C', 'N.A', 'A', 'D', 'B'];

Parte II - Organizando uma biblioteca
üöÄ Se liga nesse foguete!

Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o, mas fique de olho nesses! üëÄ

Instru√ß√µes para a realiza√ß√£o dos exerc√≠cios
Nos exerc√≠cios a seguir, voc√™ trabalhar√° com uma estrutura de dados representando uma lista de livros contendo informa√ß√µes como nome do livro, g√™nero, pessoa autora do livro e data de lan√ßamento.

Em cada exerc√≠cio, ser√° pedido que voc√™ encontre ou produza alguma informa√ß√£o a respeito dessa lista utilizando as fun√ß√µes que voc√™ aprendeu hoje. Todos os exerc√≠cios cont√™m um c√≥digo-base. Voc√™ dever√° copiar esse c√≥digo e salv√°-lo em um arquivo nomeado conforme o n√∫mero do exerc√≠cio, completando a fun√ß√£o vazia.

Por exemplo, o exerc√≠cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.

üöÄ Organizando uma biblioteca
Estes exerc√≠cios praticam os conceitos de Higher Order Functions associados a outros temas de fundamentos j√° vistos, como arrow functions, template literals e objetos. Essa mistura de conceitos √© muito importante para o seu aprendizado, ent√£o use tudo o que sabe para resolver os exerc√≠cios!

Utilize o seguinte c√≥digo como template para realizar os exerc√≠cios:

const books = [
  {
    id: 1,
    name: 'As Cr√¥nicas de Gelo e Fogo',
    genre: 'Fantasia',
    author: {
      name: 'George R. R. Martin',
      birthYear: 1948,
    },
    releaseYear: 1991,
  },
  {
    id: 2,
    name: 'O Senhor dos An√©is',
    genre: 'Fantasia',
    author: {
      name: 'J. R. R. Tolkien',
      birthYear: 1892,
    },
    releaseYear: 1954,
  },
  {
    id: 3,
    name: 'Funda√ß√£o',
    genre: 'Fic√ß√£o Cient√≠fica',
    author: {
      name: 'Isaac Asimov',
      birthYear: 1920,
    },
    releaseYear: 1951,
  },
  {
    id: 4,
    name: 'Duna',
    genre: 'Fic√ß√£o Cient√≠fica',
    author: {
      name: 'Frank Herbert',
      birthYear: 1920,
    },
    releaseYear: 1965,
  },
  {
    id: 5,
    name: 'A Coisa',
    genre: 'Terror',
    author: {
      name: 'Stephen King',
      birthYear: 1947,
    },
    releaseYear: 1986,
  },
  {
    id: 6,
    name: 'O Chamado de Cthulhu',
    genre: 'Terror',
    author: {
      name: 'H. P. Lovecraft',
      birthYear: 1890,
    },
    releaseYear: 1928,
  },
];

// Adicione o c√≥digo do exerc√≠cio aqui:

Encontre o nome da primeira pessoa autora do livro nascida no ano de 1947.
De olho na dica üëÄ: use a fun√ß√£o find.

const expectedResult = 'Stephen King';
const authorBornIn1947 = () => {
  // escreva aqui o seu c√≥digo
}

Retorne o nome do livro com menor n√∫mero de caracteres (menor nome).
De olho na dica üëÄ: use a fun√ß√£o forEach.

const expectedResult = 'Duna';
const smallerName = () => {
  let nameBook;
  // escreva aqui o seu c√≥digo

  // Vari√°vel nameBook que receber√° o valor do menor nome;
  return nameBook;
}

Encontre o primeiro livro cujo nome possua 26 caracteres.

const expectedResult = {
  author: {
    birthYear: 1948,
    name: 'George R. R. Martin',
  },
  genre: 'Fantasia',
  id: 1,
  name: 'As Cr√¥nicas de Gelo e Fogo',
  releaseYear: 1991,
};

const getNamedBook = () => {
  // escreva seu c√≥digo aqui
}

Encontre o primeiro livro cujo nome possua 26 caracteres.

const expectedResult = {
  author: {
    birthYear: 1948,
    name: 'George R. R. Martin',
  },
  genre: 'Fantasia',
  id: 1,
  name: 'As Cr√¥nicas de Gelo e Fogo',
  releaseYear: 1991,
};

const getNamedBook = () => {
  // escreva seu c√≥digo aqui
}

Fa√ßa uma fun√ß√£o que retorne true se todas as pessoas autoras tiverem nascido no s√©culo XX, ou false, caso contr√°rio.

const expectedResult = false;

function everyoneWasBornOnSecXX() {
  // escreva seu c√≥digo aqui
}

Fa√ßa uma fun√ß√£o que retorne true, se algum livro foi lan√ßado na d√©cada de 80, e false, caso contr√°rio.

const expectedResult = true;

const someBookWasReleaseOnThe80s = () => {
  // escreva seu c√≥digo aqui
}

Fa√ßa uma fun√ß√£o que retorne true, caso nenhuma pessoa autora tenha nascido no mesmo ano, e false, caso contr√°rio.

const expectedResult = false;

const authorUnique = () => {
  // escreva seu c√≥digo aqui
}

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/1a8e874c-0ece-4302-88fb-455c93880bb7/lesson/1d3778cc-5974-40da-a7c7-6a73fcf98011/solution

------------------------------------------------------------------------------

Exerc√≠cios - B√¥nus - Game Actions Simulator
Parte I
Nestes exerc√≠cios voc√™ ir√° implementar HOFs que simulam um turno de batalha em um jogo. Voc√™ ir√° criar fun√ß√µes que calculam dano, atualizam status e, ao final, retornam os resultados da rodada.

Para os pr√≥ximos exerc√≠cios, copie o c√≥digo abaixo.

const mage = {
  healthPoints: 130,
  intelligence: 45,
  mana: 125,
  damage: undefined,
};

const warrior = {
  healthPoints: 200,
  strength: 30,
  weaponDmg: 2,
  damage: undefined,
};

const dragon = {
  healthPoints: 350,
  strength: 50,
  damage: undefined,
};

const battleMembers = { mage, warrior, dragon };

Crie uma fun√ß√£o que retorne o dano do drag√£o.

O dano ser√° um n√∫mero aleat√≥rio entre 15 (dano m√≠nimo) e o valor do atributo strength (dano m√°ximo).

Crie uma fun√ß√£o que retorne o dano causado pelo warrior.

O dano ser√° um n√∫mero aleat√≥rio entre o valor do atributo strength (dano m√≠nimo) e o valor de strength * weaponDmg (dano m√°ximo).

Crie uma fun√ß√£o que retorne um objeto com duas chaves e dois valores contendo o dano e a mana gasta pelo mago em um turno.

O dano ser√° um n√∫mero aleat√≥rio entre o valor do atributo intelligence (dano m√≠nimo) e o valor de intelligence * 2 (dano m√°ximo).

A mana consumida por turno √© 15. Al√©m disso, a fun√ß√£o deve ter uma condicional: caso o mago tenha menos de 15 de mana, o valor de dano recebe uma mensagem (Ex: ‚ÄúN√£o possui mana suficiente‚Äù), e a mana gasta √© 0.

Parte II
Agora que voc√™ j√° possui a implementa√ß√£o das fun√ß√µes relativas aos tr√™s exerc√≠cios anteriores, passe-as como par√¢metro para outras fun√ß√µes que ir√£o compor um objeto gameActions. O objeto ser√° composto por a√ß√µes do jogo, e cada a√ß√£o √© por defini√ß√£o uma HOF, pois, nesse caso, s√£o fun√ß√µes que recebem como par√¢metro outra fun√ß√£o.

Copie o c√≥digo abaixo e inicie sua implementa√ß√£o:

const gameActions = {
  // Crie as HOFs neste objeto.
};

Crie a primeira HOF que comp√µe o objeto gameActions.
Ela ser√° a fun√ß√£o que simula o turno do personagem warrior. Essa HOF receber√° como par√¢metro a fun√ß√£o que calcula o dano deferido pelo personagem warrior e atualizar√° os healthPoints do monstro dragon. Al√©m disso, ela tamb√©m deve atualizar o valor da chave damage do warrior.

Crie a segunda HOF que comp√µe o objeto gameActions.
Ela ser√° a fun√ß√£o que simula o turno do personagem mage. Essa HOF receber√° como par√¢metro a fun√ß√£o que calcula o dano deferido pelo personagem mage e atualizar√° os healthPoints do monstro dragon. Al√©m disso, ela tamb√©m deve atualizar o valor das chaves damagee mana do mage.

Crie a terceira HOF que comp√µe o objeto gameActions.
Ela ser√° a fun√ß√£o que simula o turno do monstro dragon. Essa HOF receber√° como par√¢metro a fun√ß√£o que calcula o dano deferido pelo monstro dragon e atualizar√° os healthPoints dos personagens mage e warrior. Al√©m disso, ela tamb√©m deve atualizar o valor da chave damage do monstro.

Adicione ao objeto gameActions uma fun√ß√£o de primeira classe que retorna o objeto battleMembers atualizado e fa√ßa um console.log para visualizar o resultado final do turno.

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/1a8e874c-0ece-4302-88fb-455c93880bb7/lesson/3602db0e-ae82-4411-ae6c-d7636cd9093f/solution

------------------------------------------------------
