<!DOCTYPE html>
<html lang='pt-BR'>
<head>
  <meta charset='UTF-8'>
  <meta http-equiv='X-UA-Compatible' content='IE=edge'>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'>
  <title>Calculadora</title>
</head>
<body>
  <p>Informe dois n√∫meros para realizar a soma:</p>
  <label for='value1'>Valor 1:</label>
  <input type='text' id='value1'>
  <label for='value2'>Valor 2:</label>
  <input type='text' id='value2'>
  <button id='button'>Somar</button>
  <p id='result'></p>
  <script>
    function sum() {
      const value1 = document.getElementById('value1').value;
      const value2 = document.getElementById('value2').value;
      const result = Number(value1) + Number(value2);
      document.getElementById('result').innerHTML = `Resultado: ${result}`;
      document.getElementById('value1').value = '';
      document.getElementById('value2').value = '';
    }
    window.onload = () => {
      const button = document.getElementById('button');
      button.addEventListener('click', sum);
    }
  </script>
</body>
</html>

Tire um tempinho para entender o c√≥digo acima:

A aplica√ß√£o pede √† pessoa usu√°ria que informe dois n√∫meros para realizar uma soma. Esses n√∫meros s√£o inseridos atrav√©s dos inputs;

Ao clicar o bot√£o, a fun√ß√£o sum √© chamada, capturando o valor escrito nos inputs e realizando a opera√ß√£o. Antes, √© necess√°ria a convers√£o do valor usando o Number(), pois ele chega √† fun√ß√£o em forma de string. H√° tamb√©m outras formas de se converter uma string em um n√∫mero, como o parseInt() e o parseFloat();

Ao final, a fun√ß√£o sum imprime o valor em um par√°grafo e limpa os inputs para que a pessoa usu√°ria possa inserir novos valores.

Aparentemente est√° tudo funcionando, mas a aplica√ß√£o n√£o possui fluxo de exce√ß√£o. Ou seja, caso ocorra um erro, eles n√£o ser√£o tratados. Que tal resolver isso?

1 üöÄ - Crie erros personalizados.

Tente executar a aplica√ß√£o com um dos valores em branco. Notou que o retorno n√£o √© muito descritivo?

Utilize o throw new Error e o bloco try/catch.

Evite fun√ß√µes que tenham muitas responsabilidades distintas.

Caso a pessoa usu√°ria n√£o preencha nenhum input, ou preencha apenas um input, lance um erro.

Caso os valores inseridos nos inputs pela pessoa usu√°ria n√£o sejam n√∫meros, lance um erro. Voc√™ pode fazer essa verifica√ß√£o utilizando a fun√ß√£o isNan().

Adicione o texto dos erros no par√°grafo com id result, para que a pessoa usu√°ria saiba o que aconteceu. Lembre-se de usar erros descritivos!

Utilize o finally para apagar os valores dos inputs ao final do bloco try/catch.

De olho na dica üëÄ: Cuidado ao utilizar o isNaN, pois valores considerados falsy s√£o convertidos em 0, e valores truthy convertidos em 1, podendo assim gerar um falso positivo. Por exemplo, isNaN(true) retorna false, dado que true ser√° convertido para 1, que √© um n√∫mero. De olho na dica üëÄ: Lembre-se de que, em JavaScript, para separar a parte inteira da decimal de um n√∫mero, voc√™ deve utilizar o .. Exemplo: 1.5, com ponto, ao inv√©s de 1,5, com v√≠rgula.

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/8bcccf78-a098-4621-a3ec-f06ba5ba8622/lesson/d4dcf0bb-f658-4f37-9f54-ea21426a77ee/solution

--------------------------------------------------------------------

Parte II - Pedido de clientes
Imagine que voc√™ tenha ficado respons√°vel por cuidar do sistema de entrega de um restaurante e que precisasse enviar mensagens para os clientes com a informa√ß√£o da compra. Para isso, use o seguinte c√≥digo:

const order = {
  name: 'Rafael Andrade',
  phoneNumber: '11-98763-1416',
  address: {
    street: 'Rua das Flores',
    number: '389',
    apartment: '701',
  },
  order: {
    pizza: {
      marguerita: {
        amount: 1,
        price: 25,
      },
      pepperoni: {
        amount: 1,
        price: 20,
      },
    },
    drinks: {
      coke: {
        type: 'Coca-Cola Zero',
        price: 10,
        amount: 1,
      },
    },
    delivery: {
      deliveryPerson: 'Ana Silveira',
      price: 5,
    },
  },
  payment: {
    total: 60,
  },
};

const customerInfo = (order) => {
  // Adicione abaixo as informa√ß√µes necess√°rias.

};

customerInfo(order);

const orderModifier = (order) => {
  // Adicione abaixo as informa√ß√µes necess√°rias.

};

orderModifier(order);


Complete a fun√ß√£o customerInfo() para que seu retorno seja similar a 'Ol√° Ana Silveira, entrega para: Rafael Andrade, Telefone: 11-98763-1416, R. Rua das Flores, N¬∫: 389, AP: 701'.
De olho na dica üëÄ: Note que o par√¢metro da fun√ß√£o j√° est√° sendo passado na chamada da fun√ß√£o.

Complete a fun√ß√£o orderModifier() para que seu retorno seja similar a 'Ol√° Luiz Silva, o total do seu pedido de marguerita, pepperoni e Coca-Cola Zero √© R$ 50,00.';
Modifique o nome da pessoa compradora para Luiz Silva;
Modifique o valor total da compra para R$ 50,00.

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/8bcccf78-a098-4621-a3ec-f06ba5ba8622/lesson/7e34241c-c354-486b-8a2e-f0292a9b264a/solution

-----------------------------------------------------------------------------

Parte III - Organizando li√ß√µes
Suponha que voc√™ esteja trabalhando em uma escola e precise fazer algumas atualiza√ß√µes no sistema. Para isso, considere o seguinte c√≥digo:

const lesson1 = {
  materia: 'Matem√°tica',
  numeroEstudantes: 20,
  professor: 'Maria Clara',
  turno: 'manh√£',
};

const lesson2 = {
  materia: 'Hist√≥ria',
  numeroEstudantes: 20,
  professor: 'Carlos',
};

const lesson3 = {
  materia: 'Matem√°tica',
  numeroEstudantes: 10,
  professor: 'Maria Clara',
  turno: 'noite',
};

Crie uma fun√ß√£o para adicionar o turno da noite na lesson2. Essa fun√ß√£o deve possuir tr√™s par√¢metros, sendo eles: o objeto a ser modificado, a chave que dever√° ser adicionada e o valor dela.

Crie uma fun√ß√£o para listar as keys de um objeto. Essa fun√ß√£o deve receber um objeto como par√¢metro.

Crie uma fun√ß√£o para mostrar o tamanho de um objeto.

Crie uma fun√ß√£o para listar os valores de um objeto. Essa fun√ß√£o deve receber um objeto como par√¢metro.

Crie um objeto de nome allLessons, que deve agrupar todas as aulas atrav√©s do Object.assign. Cada chave desse novo objeto ser√° uma aula, sendo essas chaves lesson1, lesson2 e lesson3. Ao executar o comando console.log(allLessons), a sa√≠da dever√° ser a seguinte:

console.log(allLessons);
/*
{
  lesson1:
   { materia: 'Matem√°tica',
     numeroEstudantes: 20,
     professor: 'Maria Clara',
     turno: 'manh√£' },
  lesson2:
   { materia: 'Hist√≥ria',
     numeroEstudantes: 20,
     professor: 'Carlos',
     turno: 'noite' },
  lesson3:
   { materia: 'Matem√°tica',
     numeroEstudantes: 10,
     professor: 'Maria Clara',
     turno: 'noite' }
};
*/


Usando o objeto criado no t√≥pico anterior, crie uma fun√ß√£o que retorne o n√∫mero total de estudantes em todas as aulas.

Crie uma fun√ß√£o que obtenha o valor da chave de acordo com a sua posi√ß√£o no objeto. Por exemplo:

console.log(getValueByNumber(lesson1, 0));
// Output: 'Matem√°tica'

Crie uma fun√ß√£o que verifique se o par (chave / valor) existe na fun√ß√£o. Essa fun√ß√£o deve possuir tr√™s par√¢metros, sendo eles o objeto, o nome da chave e o valor da chave. Exemplo:

console.log(verifyPair(lesson3, 'turno', 'noite'));
// Output: true,
console.log(verifyPair(lesson3, 'materia', 'Maria Clara'));
// Output: false

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/8bcccf78-a098-4621-a3ec-f06ba5ba8622/lesson/6fe8b103-8105-4f82-b0ee-53265ef8fa4c/solution

---------------------------------------------------------------------------------------------

üöÄ B√¥nus - Organizando li√ß√µes
Utilizando o objeto (allLesson), crie uma fun√ß√£o para contar quantos estudantes assistiram √†s aulas de Matem√°tica;

Utilizando o objeto (allLesson), crie uma fun√ß√£o que deva retornar um objeto que represente o relat√≥rio do professor ou professora, as aulas que ele ou ela ministrou e o n√∫mero total de estudantes.

console.log(createReport(allLessons, 'Maria Clara'));
/* {
  professor: 'Maria Clara',
  aulas: [ 'Matem√°tica', 'Matem√°tica' ],
  estudantes: 30
} */

https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/8bcccf78-a098-4621-a3ec-f06ba5ba8622/lesson/9ec1f0e1-2703-404c-b78e-52bf82ff822b/solution

