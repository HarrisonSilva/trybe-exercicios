Crie uma nova pasta e entre nela.
mkdir fixacao-testes
cd fixacao-testes

Inicialize esta pasta como um projeto do node.
npm init -y

Instale o Jest.
npm install -D jest

Em seu arquivo package.json, altere a chave "scripts"para que seja
"scripts": {
  "test": "jest --coverage"
},

Crie um arquivo chamado createItem.js com o seguinte conte√∫do:
const createItem = (name, unit, price, quantity) => {
  if (typeof name !== 'string') {
    throw new Error('O nome do item deve ser uma string');
  }
  if (price <= 0) {
    throw new Error('O pre√ßo do item deve ser maior que zero');
  }
  if (quantity === undefined) {
    quantity = 0;
  }
  return {
    name: name,
    quantity: quantity,
    unit: unit,
    price: price,
  };
}
module.exports = createItem;

Crie um arquivo chamado createItem.test.js com o conte√∫do abaixo:
const createItem = require('./createItem');
describe('a fun√ß√£o createItem', () => {
  it.todo('cria um item v√°lido');
  it.todo('utiliza zero como quantidade padr√£o');
  it.todo('Lan√ßa um erro quando n√£o recebe par√¢metros');
  it.todo('Lan√ßa um erro se o nome do item n√£o √© uma string');
  it.todo('Lan√ßa um erro se o pre√ßo √© negativo');
  it.todo('Lan√ßa um erro se o pre√ßo √© zero');
});

Teste se a fun√ß√£o createItem cria um item v√°lido.

Remova o .todo do primeiro it e adicione a fun√ß√£o que ir√° implementar o teste:

  it('cria um item v√°lido', () => {
    // seus testes v√£o aqui!
  });

Construindo nosso teste:
O que a fun√ß√£o createItem recebe como par√¢metro?
Para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg', 1.99 e 20, qual o resultado esperado?
Considerando como resultado esperado o objeto { name: 'banana', unit: 'kg', price: 1.99, quantity: 20 }, qual matcher mais adequado?
Remova o .todo e implemente o teste para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg', 1.99 e 20, e verifique se o resultado √© o objeto { name: 'banana', unit: 'kg', price: 1.99, quantity: 20 }.

Qual a cobertura de c√≥digo atual da nossa fun√ß√£o?

Teste se a fun√ß√£o createItem utiliza zero como quantidade padr√£o.

Construindo nosso teste:
Qual condi√ß√£o da fun√ß√£o createItem implementa essa caracter√≠stica?
Como podemos chamar a fun√ß√£o para que entre nessa condi√ß√£o?
Para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg' e 1.99, sem o quarto argumento, qual o resultado esperado?
Considerando que o resultado esperado √© um objeto que tenha a propriedade quantity igual a zero, qual o matcher mais adequado?
Remova o .todo e implemente o teste para a chamada da fun√ß√£o createItem com os argumentos 'banana', 'kg' e 1.99, e verifique se o resultado tem a propriedade quantity com o valor 0.

Qual a cobertura de c√≥digo atual da nossa fun√ß√£o? Aumentou em compara√ß√£o com o exerc√≠cio anterior?

Teste se a fun√ß√£o createItem lan√ßa algum erro quando n√£o recebe par√¢metros.

Implemente o teste para a chamada da fun√ß√£o createItem sem argumentos e verifique se √© lan√ßada alguma exce√ß√£o. Qual o matcher mais adequado? Lembre-se de envolver a chamada da fun√ß√£o em uma nova fun√ß√£o, para que o Jest possa capturar o erro, conforme orienta a documenta√ß√£o. N√£o se preocupe em qual erro √© retornado, vamos fazer isso no pr√≥ximo exerc√≠cio.

Analise a cobertura de c√≥digo. Qual a cobertura atual?

Teste se a fun√ß√£o createItem lan√ßa um erro se o nome do item n√£o √© uma string.

Vamos supor que tenhamos invertido o nome do item com o pre√ßo na chamada da fun√ß√£o, passando como par√¢metro: 1.99, 'kg', 'banana' e 20. Essa chamada dever√° retornar o erro 'O nome do item deve ser uma string'.Afinal, estamos passando 1.99 para o par√¢metro name. Como podemos verificar se retorna exatamente esse erro?

Analise a cobertura de c√≥digo. Mudaram as linhas cobertas no exerc√≠cio anterior?

Teste se a fun√ß√£o createItem lan√ßa um erro se o pre√ßo do item √© negativo ou zero.

Crie um teste que, ao chamar a fun√ß√£o passando -0.01 para o pre√ßo, verifica se a fun√ß√£o lan√ßa o erro 'O pre√ßo do item deve ser maior que zero'.

Analise a cobertura de c√≥digo.

Crie um teste que, ao chamar a fun√ß√£o passando 0.00 para o pre√ßo, verifica se a fun√ß√£o lan√ßa o erro 'O pre√ßo do item deve ser maior que zero'.

Analise novamente a cobertura de c√≥digo. A cobertura n√£o muda, mas foram testados casos diferentes üòâ.

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/81b1a1c8-b7a9-432d-89e1-70b2b2264820/lesson/885d95f1-36a1-4e73-abd7-31e7d1ed306b/solution

------------_-----------------------------------------------------------------------------------------------------

Exerc√≠cios - agora, a pr√°tica
üöÄ Se liga nesse foguete!

Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o, mas fique de olho nesses! üëÄ

Praticando a implementa√ß√£o de testes
Voc√™ vai implementar v√°rios testes em contextos diferentes a fim de consolidar a mec√¢nica e tamb√©m a forma de pensar em testes.

Copie a fun√ß√£o j√° implementada e desenvolva os testes. Separe a fun√ß√£o e o teste em arquivos diferentes para evitar qualquer tipo de problema.

üöÄ Exerc√≠cio 1
Voc√™ ficou respons√°vel por criar os testes de uma aplica√ß√£o de calculadora. Para isso, copie a fun√ß√£o j√° implementada abaixo e desenvolva os testes: Separe a fun√ß√£o e o teste em arquivos diferentes para evitar qualquer tipo de problema.

De olho na dica üëÄ: Crie os arquivos com o respectivo nome da fun√ß√£o. Ex: sum.js e sum.test.js

A fun√ß√£o sum(a, b) retorna a soma do par√¢metro a com o b:
Teste se o retorno de sum(4, 5) √© 9;

Teste se o retorno de sum(0, 0) √© 0.

Teste se a fun√ß√£o sum lan√ßa um erro quando os par√¢metros s√£o number 4 e string '5';

Teste se a mensagem de erro √© 'parameters must be numbers' quando realizar a chamada sum(4, '5');

function sum(a, b) {
  if (typeof a !== 'number' || typeof b !== 'number') {
    throw new Error('parameters must be numbers');
  }

  return a + b;
}

üöÄ Exerc√≠cio 2
Neste primeiro exerc√≠cio, use como base a fun√ß√£o a seguir que imprime no terminal uma mensagem de boas-vindas de acordo com as informa√ß√µes de personagem passada

// printMessage.js
let info = {
  personagem: 'Margarida',
  origem: 'Pato Donald',
  nota: 'Namorada do personagem principal nos quadrinhos do Pato Donald',
};

const printMessage = (characterInfo) => {
  return ('Boas vindas, ' + characterInfo.personagem);
};

console.log(printMessage(info));

module.exports = { info, printMessage };

Considerando a fun√ß√£o printMessage, crie um teste em Jest para garantir que o objeto passado como par√¢metro possui a propriedade personagem.
üöÄ Exerc√≠cio 3
Complementando o teste da fun√ß√£o acima que valida a entrada de par√¢metro, voc√™ pode utilizar o matcher toMatch() para validar a resposta da fun√ß√£o.

Verifique se a resposta cont√©m a informa√ß√£o Boas vindas,, antes de chamar o nome da personagem;
Verifique se a resposta cont√©m o nome correto da personagem.

// printMessageTest.test.js
const { info } = require('./printMessage.js');

describe('Exerc√≠cio de teste se√ß√£o 7.3', () => {
  it('teste objeto info', () => {
    expect(info).toHaveProperty('personagem');
  });
  // implemente seus testes aqui
})

üöÄ Exerc√≠cio 4
Para finalizar o teste da fun√ß√£o printMessage, voc√™ pode ainda criar um fluxo de exce√ß√£o dentro da fun√ß√£o para criar um erro caso seja enviado um par√¢metro que n√£o seja um objeto, ou que n√£o tenha a propriedade personagem como no exemplo abaixo.

// printMessage.js
let info = {
  personagem: 'Margarida',
  origem: 'Pato Donald',
  nota: 'Namorada do personagem principal nos quadrinhos do Pato Donald',
};

const printMessage = (characterInfo) => {
  if (!characterInfo || characterInfo.personagem === undefined) {
    throw new Error('objeto inv√°lido');
  }
  return ('Boas vindas, '+ characterInfo.personagem);
};

console.log(printMessage(info));

module.exports = { info, printMessage };

Agora que a fun√ß√£o possui um fluxo de exce√ß√£o, crie uma fun√ß√£o de teste para validar se a mensagem de erro √© lan√ßada caso a fun√ß√£o seja chamada com um objeto inv√°lido.

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/81b1a1c8-b7a9-432d-89e1-70b2b2264820/lesson/42511156-6608-423c-99d2-2a6a6d6505c7/solution

------------------------------------------------------------------------------------------------------------------------

Vamos para um desafio?! Neste exerc√≠cio, voc√™ ir√° praticar o desenvolvimento orientado a testes implementando:
A fun√ß√£o;
Os testes para essa fun√ß√£o;
Considere os dados abaixo. Voc√™ deve criar uma fun√ß√£o que receba dois par√¢metros: o id do funcion√°rio e a informa√ß√£o dispon√≠vel sobre ele (firstName, lastName, specialities). Voc√™ tamb√©m dever√° criar os testes para essa fun√ß√£o. Sua fun√ß√£o dever√° ent√£o retornar os resultados da busca pelo id para aquele funcion√°rio e a informa√ß√£o consultada. Caso o id n√£o conste no quadro de funcion√°rios, sua fun√ß√£o deve retornar o erro "ID n√£o identificada". Se a informa√ß√£o que se quer acessar n√£o existir, a fun√ß√£o deve retornar o erro "Informa√ß√£o indispon√≠vel".

// Dados
const professionalBoard = [
  {
    id: '8579-6',
    firstName: 'Ana',
    lastName: 'Gates',
    specialities: ['UX', 'Design'],
  },
  {
    id: '5569-4',
    firstName: 'George',
    lastName: 'Jobs',
    specialities: ['Frontend', 'Redux', 'React', 'CSS'],
  },
  {
    id: '4456-4',
    firstName: 'Leila',
    lastName: 'Zuckerberg',
    specialities: ['Context API', 'RTL', 'Bootstrap'],
  },
  {
    id: '1256-4',
    firstName: 'Linda',
    lastName: 'Bezos',
    specialities: ['Hooks', 'Context API', 'Tailwind CSS'],
  },
  {
    id: '9852-2-2',
    firstName: 'Jeff',
    lastName: 'Cook',
    specialities: ['Ruby', 'SQL'],
  },
  {
    id: '4678-2',
    firstName: 'Paul',
    lastName: 'Dodds',
    specialities: ['Backend'],
  },
];

// Pesquisa
const searchEmployee = (id, detail) => {
  // Implemente seu c√≥digo aqui
};

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/81b1a1c8-b7a9-432d-89e1-70b2b2264820/lesson/939ae887-2913-45da-8fec-a314d68bc727/solution

------------------------------------------------------------------------



