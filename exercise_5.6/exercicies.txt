Para Fixar
Produza o mesmo resultado do c√≥digo, por√©m utilizando o array destructuring para recolher a fun√ß√£o e a sauda√ß√£o.

const primeNumbers = [17, 23, 37]

const sum = (a, b) => {
  console.log(a + b);
}

sum(primeNumbers[0], primeNumbers[2]) // 54

// Produza o mesmo resultado acima, por√©m utilizando array destructuring

O array abaixo possui alguns n√∫meros que n√£o condizem com o conte√∫do que ele deveria possuir. Atrav√©s de array destructuring, fa√ßa com que existam apenas n√∫meros pares na vari√°vel numerosPares.

let numerosPares = [1, 3, 5, 6, 8, 10, 12];

console.log(numerosPares); // [6, 8, 10, 12];

// Utilize array destructuring para produzir o resultado esperado pelo console.log acima

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/2e0308d9-a5c2-4917-b322-b588ac8aec9a/lesson/95e819ad-4c1e-4242-80d2-b2ed8660ed67/solution

--------------------------------------------------------------------

Para Fixar
Do jeito que est√°, quando person √© passado para a fun√ß√£o getNationality, o retorno √© Jo√£o is undefined. Ajuste a fun√ß√£o getNationality para que a chamada getNationality(person) retorne Jo√£o is Brazilian.

const getNationality = ({ firstName, nationality }) => `${firstName} is ${nationality}`;

const person = {
  firstName: 'Jo√£o',
  lastName: 'Jr II',
};

const otherPerson = {
  firstName: 'Ivan',
  lastName: 'Ivanovich',
  nationality: 'Russian',
};

console.log(getNationality(otherPerson)); // Ivan is Russian
console.log(getNationality(person));

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/2e0308d9-a5c2-4917-b322-b588ac8aec9a/lesson/e41cb916-3f46-4a93-8650-62adc653e16f/solution

--------------------------------------------------------------------------------------------

Para Fixar
Agora √© hora de praticar: altere a fun√ß√£o getPosition utilizando a property shorthand.

const getPosition = (latitude, longitude) => ({
  latitude: latitude,
  longitude: longitude,
});

console.log(getPosition(-19.8157, -43.9542));

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/2e0308d9-a5c2-4917-b322-b588ac8aec9a/lesson/57a99321-572a-4085-b3dd-6f54d7b51916/solution

------------------------------------------------------------------------------------------------------------------

Para Fixar
Para praticar, escreva uma fun√ß√£o multiply que multiplique dois n√∫meros passados como argumentos. Atribua como default o valor 1, caso n√£o seja passado nenhum valor como segundo par√¢metro.

const multiply = (number, value) => {
  // Escreva aqui a sua fun√ß√£o
};

console.log(multiply(8));

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/2e0308d9-a5c2-4917-b322-b588ac8aec9a/lesson/99f645a1-02d5-45f7-8859-b79e3a378b81/solution

-------------------------------------------------------------------------------------------

Exerc√≠cios - agora, a pr√°tica
Instru√ß√µes para a realiza√ß√£o dos exerc√≠cios
Todos os exerc√≠cios cont√™m um c√≥digo-base. Voc√™ dever√° copiar esse c√≥digo e salv√°-lo em um arquivo nomeado conforme o n√∫mero do exerc√≠cio. Por exemplo, o exerc√≠cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.

üöÄ Se liga nesse foguete!

Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o, mas fique de olho nesses! üëÄ

Exerc√≠cio 1
Escreva a fun√ß√£o swap, que, dado um array de 3 elementos, retorna um novo array com o primeiro e terceiro elementos trocados. Detalhe: voc√™ precisa fazer essa fun√ß√£o gastando apenas 1 linha. O retorno da fun√ß√£o utilizando o array myList deve ser [3, 2, 5].

Exerc√≠cios - agora, a pr√°tica
Instru√ß√µes para a realiza√ß√£o dos exerc√≠cios
Todos os exerc√≠cios cont√™m um c√≥digo-base. Voc√™ dever√° copiar esse c√≥digo e salv√°-lo em um arquivo nomeado conforme o n√∫mero do exerc√≠cio. Por exemplo, o exerc√≠cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.

üöÄ Se liga nesse foguete!

Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o, mas fique de olho nesses! üëÄ

Exerc√≠cio 1
Escreva a fun√ß√£o swap, que, dado um array de 3 elementos, retorna um novo array com o primeiro e terceiro elementos trocados. Detalhe: voc√™ precisa fazer essa fun√ß√£o gastando apenas 1 linha. O retorno da fun√ß√£o utilizando o array myList deve ser [3, 2, 5].

Exerc√≠cio 2
Suponha que voc√™ esteja trabalhando em projeto de um site de carros, onde cada carro √© representado dentro de um array. Ent√£o sua lideran√ßa pede que seja mudado o formato de array para objeto. Para isso, crie uma fun√ß√£o chamada toObject que, dada uma lista, retorna um objeto representando o carro:

const palio = ['Palio', 'Fiat', 2019];
const shelbyCobra = ['Shelby Cobra', 'Ford', 1963];
const chiron = ['Chiron', 'Bugatti', 2016];

// escreva toObject abaixo

Exerc√≠cio 3
Escreva uma fun√ß√£o greet que, dado o nome de uma pessoa, retorna uma mensagem de cumprimento. Um par√¢metro adicional pode ser passado para alterar o cumprimento utilizado:

// escreva greet abaixo

// Retornos esperados:
console.log(greet('John')); // 'Hi John'
console.log(greet('John', 'Good morning')); // 'Good morning John'
console.log(greet('Isabela', 'Oi')); // 'Oi Isabela'

// escreva greet abaixo

// Retornos esperados:
console.log(greet('John')); // 'Hi John'
console.log(greet('John', 'Good morning')); // 'Good morning John'
console.log(greet('Isabela', 'Oi')); // 'Oi Isabela'

// escreva greet abaixo

// Retornos esperados:
console.log(greet('John')); // 'Hi John'
console.log(greet('John', 'Good morning')); // 'Good morning John'
console.log(greet('Isabela', 'Oi')); // 'Oi Isabela'

// escreva greet abaixo

// Retornos esperados:
console.log(greet('John')); // 'Hi John'
console.log(greet('John', 'Good morning')); // 'Good morning John'
console.log(greet('Isabela', 'Oi')); // 'Oi Isabela'

Exerc√≠cio 4
Escreva uma fun√ß√£o getLastName que receba como par√¢metro um objeto contendo informa√ß√µes de uma pessoa. Essa fun√ß√£o deve retornar a propriedade lastName para o objeto passado, por√©m, caso o objeto n√£o tenha essa propriedade, a fun√ß√£o deve retornar a mensagem lastName n√£o preenchido.

const student1 = {
  name: `Claudia`,
  lastName: `Farias`,
  age: 23,
}

const student2 = {
  name: `Vitor`,
  age: 20,
}

// escreva 'getLastName' abaixo para receber os objetos e retornar sua propriedade `lastName`

console.log(getLastName(student1));
console.log(getLastName(student2));

Exerc√≠cio 5
Usando array destructuring, armazene cada nome presente na vari√°vel moreStudents em vari√°veis separadas:

const moreStudents = [
    'Chris', 
    ['Ahmad', 'Antigoni'], 
    ['Toby', 'Sam']
  ];

  // Escreva seu c√≥digo aqui
  const [] = moreStudents;

console.log(student1, student2, student3, student4, student5);

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/ccfff26d-24c9-422e-b886-6ee19f20db14/day/2e0308d9-a5c2-4917-b322-b588ac8aec9a/lesson/7683fa54-6f77-4d48-b130-fd7a75f3a06e/solution

-------------------------------------------------------------------------------