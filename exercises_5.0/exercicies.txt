üöÄ Exerc√≠cio 1
Copie a fun√ß√£o j√° implementada e desenvolva os testes. Separe a fun√ß√£o e o teste em arquivos diferentes para evitar qualquer tipo de problema.

A fun√ß√£o myRemove(arr, item) recebe um array arr e retorna uma c√≥pia desse array sem o elemento item, caso ele exista no array:
Verifique se a chamada myRemove([1, 2, 3, 4], 3) retorna o array esperado;

Verifique se a chamada myRemove([1, 2, 3, 4], 3) n√£o retorna o array [1, 2, 3, 4];

Verifique se a chamada myRemove([1, 2, 3, 4], 5) retorna o array esperado.

function myRemove(arr, item) {
  let newArr = [];
  for (let index = 0; index < arr.length; index += 1) {
    if (item !== arr[index]) {
      newArr.push(arr[index]);
    }
  }
  return newArr;
}

// implemente seus testes aqui

üöÄ Exerc√≠cio 2
Copie a fun√ß√£o j√° implementada e desenvolva os testes. Separe a fun√ß√£o e o teste em arquivos diferentes para evitar qualquer tipo de problema.

A fun√ß√£o myFizzBuzz(num) recebe um n√∫mero num como par√¢metro. Caso num seja um n√∫mero divis√≠vel por 3 e 5, a fun√ß√£o retorna "fizzbuzz". Caso num seja um n√∫mero divis√≠vel apenas por 3, retorna "fizz". E caso num seja um n√∫mero divis√≠vel apenas por 5, retorna "buzz". Se num for um n√∫mero que n√£o √© divis√≠vel nem por 3 e nem por 5, a fun√ß√£o retorna o pr√≥prio n√∫mero num. Caso num n√£o seja um n√∫mero, a fun√ß√£o retorna false.
Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero divis√≠vel por 3 e 5, e verifique se o retorno √© o esperado.

Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero divis√≠vel por 3, e verifique se o retorno √© o esperado.

Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero divis√≠vel por 5, e verifique se o retorno √© o esperado.

Execute a fun√ß√£o myFizzBuzz(num), sendo num um n√∫mero que n√£o √© divis√≠vel por 3 ou 5, e verifique se o retorno √© o esperado.

Execute a fun√ß√£o myFizzBuzz(num), sendo num um par√¢metro que n√£o √© um n√∫mero, e verifique se o retorno √© o esperado.

function myFizzBuzz(num) {
  if (typeof num !== 'number') return false;
  if (num % 3 === 0 && num % 5 === 0) return 'fizzbuzz';
  if (num % 3 === 0) return 'fizz';
  if (num % 5 === 0) return 'buzz';
  return num;
}

// implemente seus testes aqui

üöÄ Exerc√≠cio 3
Considere o c√≥digo abaixo para realizar o pr√≥ximo exerc√≠cio:

const mapString = (objectMap, string) => {
  const splitString = string.split('');
  const mappedArray = [];
  for (let index = 0; index < splitString.length; index += 1) {
    const character = splitString[index];
    const mappedValue = objectMap[character];
    
    if (mappedValue) {
      mappedArray.push(mappedValue);
    } else {
      mappedArray.push(character);
    }
  }
  return mappedArray.join('');
}
const encode = (string) => {
  const map = {
    a: 1,
    e: 2,
    i: 3,
    o: 4,
    u: 5,
  };
  return mapString(map, string);
}
const decode = (string) => {
  const map = {
    1: 'a',
    2: 'e',
    3: 'i',
    4: 'o',
    5: 'u',
  };
  return mapString(map, string);
}

Para as fun√ß√µes encode e decode, crie os seguintes testes em Jest:
Teste se encode e decode s√£o fun√ß√µes;
Para a fun√ß√£o encode, teste se as vogais a, e, i, o, u s√£o convertidas em 1, 2, 3, 4 e 5, respectivamente;
Para a fun√ß√£o decode, teste se os n√∫meros 1, 2, 3, 4 e 5 s√£o convertidos nas vogais a, e, i, o, u, respectivamente;
Teste se as demais letras/n√∫meros n√£o s√£o convertidos para cada caso;
Teste se a string que √© retornada pelas fun√ß√µes tem o mesmo n√∫mero de caracteres que a string passada como par√¢metro.

üöÄ Exerc√≠cio 4
A fun√ß√£o techList recebe como par√¢metros um array contendo uma lista de tecnologias e uma string com um nome. Para cada tecnologia no array a fun√ß√£o cria, em ordem alfab√©tica, um objeto com a seguinte estrutura:

{
  tech: 'nomeTecnologia',
  name: name,
}

Implemente a fun√ß√£o techList a partir dos testes abaixo. √â importante nunca alterar os testes ou as vari√°veis j√° escritas no c√≥digo.

const techList = require('./techList.js');

describe('Testa a fun√ß√£o techList', () => {
  it('Testa se a fun√ß√£o techList √© definida', () => {
    expect(techList).toBeDefined();
  });
  it('Testa se techList √© uma fun√ß√£o', () => {
    expect(typeof techList).toBe('function');
  });
  it('Lista com 5 tecnologias deve retornar uma lista de objetos ordenados', () => {
    expect(techList(['React', 'Jest', 'HTML', 'CSS', 'JavaScript'], 'Lucas')).toEqual([
      {
        tech: 'CSS',
        name: 'Lucas'
      },
      {
        tech: 'HTML',
        name: 'Lucas'
      },
      {
        tech: 'JavaScript',
        name: 'Lucas'
      },
      {
        tech: 'Jest',
        name: 'Lucas'
      },
      {
        tech: 'React',
        name: 'Lucas'
      }
    ]);
  });
  it('Lista com 0 tecnologias deve retornar uma mensagem de erro "Vazio!"', () => {
    expect(techList([], 'Lucas')).toBe('Vazio!');
  });
});

module.exports = techList;

üöÄ Exerc√≠cio 5
A fun√ß√£o hydrate recebe uma string no formato ‚Äúnumero bebida‚Äù, e retorna a sugest√£o de quantos copos de √°gua voc√™ deve beber para se hidratar. Para cada bebida, deve-se tomar um copo de √°gua para n√£o ter ressaca. Exemplo:

// string recebida
'1 cerveja'
// retorno da fun√ß√£o
'1 copo de √°gua'

// string recebida
'1 cerveja, 2 shots e 1 catuaba'
// retorno da fun√ß√£o
'4 copos de √°gua'

// string recebida
'2 caipirinhas'
// retorno da fun√ß√£o
'2 copos de √°gua'

Implemente a fun√ß√£o hydrate a partir dos testes abaixo. √â importante nunca alterar os testes ou as vari√°veis j√° escritas no c√≥digo.

Implemente a fun√ß√£o hydrate a partir dos testes abaixo. √â importante nunca alterar os testes ou as vari√°veis j√° escritas no c√≥digo.

GABARITO
https://app.betrybe.com/learn/course/5e938f69-6e32-43b3-9685-c936530fd326/module/fc998c60-386e-46bc-83ca-4269beb17e17/section/131a8311-a3d9-4404-ae50-2ea6c971f5d8/day/ae23022b-e51b-4d2a-a3ed-6bd2160946ad/lesson/746bf996-708a-4fc9-b546-53e6690a15ef/solution

----------------------------------------------------------------------------------------
